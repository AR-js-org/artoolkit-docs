[Category:osgART Standard
Edition](/Category:osgART_Standard_Edition "wikilink") [Category:osgART
Professional Edition](/Category:osgART_Professional_Edition "wikilink")

[Main Page](/Main_Page "wikilink") \> [osgART](/osgART "wikilink") \>
[osgART HowTo](/osgART_HowTo "wikilink") \>

Code to generate a HeightField
------------------------------

This code generates a height field by loading the heightmap file and
using it to construct an osg::HeightField object. The object is then
textured using the image specified by the texFile argument.

<cpp> osg::Node\* createHeightField(std::string heightFile, std::string
texFile) {

`   osg::Image* heightMap = osgDB::readImageFile(heightFile);`\
\
`   osg::HeightField* heightField = new osg::HeightField();`\
`   heightField->allocate(heightMap->s(), heightMap->t());`\
`   heightField->setOrigin(osg::Vec3(-heightMap->s() / 2, -heightMap->t() / 2, 0));`\
`   heightField->setXInterval(1.0f);`\
`   heightField->setYInterval(1.0f);`\
`   heightField->setSkirtHeight(1.0f);`\
\
`   for (int r = 0; r < heightField->getNumRows(); r++) {`\
`       for (int c = 0; c < heightField->getNumColumns(); c++) {`\
`           heightField->setHeight(c, r, ((*heightMap->data(c, r)) / 255.0f) * 80.0f);`\
`       }`\
`   }`\
\
`   osg::Geode* geode = new osg::Geode();`\
`   geode->addDrawable(new osg::ShapeDrawable(heightField));`\
\
`   osg::Texture2D* tex = new osg::Texture2D(osgDB::readImageFile(texFile));`\
`   tex->setFilter(osg::Texture2D::MIN_FILTER,osg::Texture2D::LINEAR_MIPMAP_LINEAR);`\
`   tex->setFilter(osg::Texture2D::MAG_FILTER,osg::Texture2D::LINEAR);`\
`   tex->setWrap(osg::Texture::WRAP_S, osg::Texture::REPEAT);`\
`   tex->setWrap(osg::Texture::WRAP_T, osg::Texture::REPEAT);`\
`   geode->getOrCreateStateSet()->setTextureAttributeAndModes(0, tex);`\
\
`   return geode;`

} </cpp>